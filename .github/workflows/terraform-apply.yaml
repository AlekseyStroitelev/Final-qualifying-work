name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/main/**'           # Запуск только при изменении Terraform файлов
      - '.github/workflows/**'   # И при изменении самого workflow
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/main/**'           # Запуск только при изменении Terraform файлов
      - '.github/workflows/**'   # И при изменении самого workflow
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to destroy infrastructure'
        required: false
        default: 'false'
      apply:
        description: 'Set to "true" to apply infrastructure changes'
        required: false
        default: 'false'

# Глобальные переменные окружения
env:
  TF_VERSION: "1.5.0"           # Версия Terraform
  TF_DIR: "terraform/main"          # Директория с Terraform кодом

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Переменные окружения для всего job
    env:
      TF_VAR_token: ${{ secrets.YC_TOKEN }}
      TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
      TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
      
      # Переменные для Yandex Object Storage backend
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout code
      uses: actions/checkout@v4

    # Шаг 2: Установка Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Шаг 3: Инициализация Terraform с явным указанием credentials для backend
    - name: Terraform Init
      run: |
        terraform -chdir=${{ env.TF_DIR }} init \
          -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -backend-config="skip_credentials_validation=true" \
          -backend-config="skip_region_validation=true" \
          -backend-config="skip_metadata_api_check=true" \
          -backend-config="force_path_style=true"

    # Шаг 4: Проверка форматирования кода
    - name: Terraform Format
      run: terraform -chdir=${{ env.TF_DIR }} fmt -check -recursive

    # Шаг 5: Валидация синтаксиса
    - name: Terraform Validate
      run: terraform -chdir=${{ env.TF_DIR }} validate

    # Шаг 6: Создание плана изменений
    - name: Terraform Plan
      run: |
        terraform -chdir=${{ env.TF_DIR }} plan -input=false -out=tfplan \
          -var="token=${{ secrets.YC_TOKEN }}" \
          -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
          -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \

    # Шаг 7: Сохранение плана как артефакт (для debugging)
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_DIR }}/tfplan

    # Шаг 8: Автоматическое применение при push в main/master
    - name: Terraform Apply (Automatic Trigger)
      if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
      run: terraform -chdir=${{ env.TF_DIR }} apply -input=false -auto-approve

    # Шаг 9: Ручное применение через workflow_dispatch
    - name: Terraform Apply (Manual Trigger)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true'
      run: terraform -chdir=${{ env.TF_DIR }} apply -input=false -auto-approve

    # Шаг 10: Ручное удаление через workflow_dispatch
    - name: Terraform Destroy (Manual Trigger)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
      run: |
        terraform -chdir=${{ env.TF_DIR }} destroy -input=false -auto-approve \
          -var="token=${{ secrets.YC_TOKEN }}" \
          -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
          -var="folder_id=${{ secrets.YC_CLOUD_ID }}"

    # Шаг 11: Очистка (опционально)
    - name: Cleanup
      if: always()
      run: |
        rm -f ${{ env.TF_DIR }}/tfplan
        rm -f ${{ env.TF_DIR }}/.terraform.lock.hcl